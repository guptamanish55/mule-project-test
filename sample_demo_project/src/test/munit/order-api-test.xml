<?xml version="1.0" encoding="UTF-8"?>

<munit xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xmlns:munit="http://www.mulesoft.org/schema/mule/munit"
      xmlns:munit-tools="http://www.mulesoft.org/schema/mule/munit-tools"
      xmlns:http="http://www.mulesoft.org/schema/mule/http"
      xmlns:db="http://www.mulesoft.org/schema/mule/db"
      xmlns="http://www.mulesoft.org/schema/mule/core"
      xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
      xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
      http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
      http://www.mulesoft.org/schema/mule/munit-tools http://www.mulesoft.org/schema/mule/munit-tools/current/mule-munit-tools.xsd
      http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
      http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd">

    <!-- VIOLATION: Missing test configuration properties -->
    <munit:config name="order-api-test.xml" />

    <!-- Test for GET /api/v1/orders -->
    <munit:test name="test-get-orders-success" doc:id="test-get-orders-success">
        
        <munit:before-test>
            <munit-tools:mock-when doc:name="Mock Order Query" doc:id="mock-order-query">
                <munit-tools:with-attributes>
                    <munit-tools:with-attribute attributeName="doc:name" whereValue="Execute Query"/>
                </munit-tools:with-attributes>
                <munit-tools:then-return>
                    <munit-tools:payload value='[
                        {
                            "order_id": "ORD-001",
                            "customer_id": "CUST-123",
                            "status": "PENDING",
                            "total_amount": 99.99,
                            "credit_card_number": "4111111111111111",
                            "credit_card_cvv": "123",
                            "billing_address": "{\"street\":\"123 Main St\"}",
                            "items": "[{\"id\":\"ITEM-1\",\"quantity\":2}]",
                            "created_date": "2024-01-15",
                            "internal_notes": "Rush order",
                            "processing_flags": "VERIFIED"
                        }
                    ]' mediaType="application/json"/>
                </munit-tools:then-return>
            </munit-tools:mock-when>
        </munit:before-test>
        
        <munit:execution>
            <http:request method="GET" doc:name="GET Orders" doc:id="http-get-orders" 
                         config-ref="HTTP_Listener_Config" 
                         path="/api/v1/orders"/>
        </munit:execution>
        
        <munit:validation>
            <munit-tools:assert-that doc:name="Assert Status Code" doc:id="assert-order-status-200" 
                                   expression="#[attributes.statusCode]" 
                                   is="#[MunitTools::equalTo(200)]"/>
            
            <!-- VIOLATION: Not testing for sensitive data exposure -->
            <munit-tools:assert-that doc:name="Assert Orders Exist" doc:id="assert-orders-exist" 
                                   expression="#[payload.orders]" 
                                   is="#[MunitTools::notNullValue()]"/>
            
            <!-- VIOLATION: Not validating that sensitive payment data is exposed -->
            <munit-tools:assert-that doc:name="Credit Card Exposed Check" doc:id="credit-card-exposed" 
                                   expression="#[payload.orders[0].creditCardNumber]" 
                                   is="#[MunitTools::notNullValue()]"/>
        </munit:validation>
    </munit:test>

    <!-- Test for POST /api/v1/orders -->
    <munit:test name="test-create-order-success" doc:id="test-create-order-success">
        
        <munit:before-test>
            <!-- VIOLATION: Mock doesn't simulate real order creation process -->
            <munit-tools:mock-when doc:name="Mock Order Insert" doc:id="mock-order-insert">
                <munit-tools:with-attributes>
                    <munit-tools:with-attribute attributeName="doc:name" whereValue="Insert Order"/>
                </munit-tools:with-attributes>
                <munit-tools:then-return>
                    <munit-tools:payload value='{"insertedId": "ORD-002"}' mediaType="application/json"/>
                </munit-tools:then-return>
            </munit-tools:mock-when>
        </munit:before-test>
        
        <munit:execution>
            <munit-tools:set-event doc:name="Set Order Data" doc:id="set-order-data">
                <munit-tools:payload value='{
                    "customerId": "CUST-456",
                    "totalAmount": 149.99,
                    "paymentInfo": {
                        "creditCardNumber": "4111111111111111",
                        "cvv": "456",
                        "expiry": "12/25"
                    },
                    "billingAddress": {
                        "street": "456 Oak Ave",
                        "city": "Portland",
                        "state": "OR",
                        "zip": "97201"
                    },
                    "shippingAddress": {
                        "street": "789 Pine St",
                        "city": "Seattle",
                        "state": "WA",
                        "zip": "98101"
                    },
                    "items": [
                        {"productId": "PROD-001", "quantity": 1, "price": 149.99}
                    ]
                }' mediaType="application/json"/>
            </munit-tools:set-event>
            
            <http:request method="POST" doc:name="POST Create Order" doc:id="http-post-order" 
                         config-ref="HTTP_Listener_Config" 
                         path="/api/v1/orders">
                <http:headers><![CDATA[#[{"Content-Type": "application/json"}]]]></http:headers>
            </http:request>
        </munit:execution>
        
        <munit:validation>
            <munit-tools:assert-that doc:name="Assert Order Created" doc:id="assert-order-created" 
                                   expression="#[attributes.statusCode]" 
                                   is="#[MunitTools::equalTo(200)]"/>
            
            <!-- VIOLATION: Not testing that sensitive payment data is stored -->
            <!-- VIOLATION: Not testing inventory deduction -->
            <!-- VIOLATION: Not testing fraud detection -->
        </munit:validation>
    </munit:test>

    <!-- VIOLATION: Missing business rule validation tests -->
    <munit:test name="test-create-order-minimum-amount-violation" doc:id="test-minimum-amount-violation">
        
        <munit:execution>
            <munit-tools:set-event doc:name="Set Low Amount Order" doc:id="set-low-amount-order">
                <munit-tools:payload value='{
                    "customerId": "CUST-789",
                    "totalAmount": 5.00,
                    "paymentInfo": {
                        "creditCardNumber": "4111111111111111",
                        "cvv": "789",
                        "expiry": "03/26"
                    },
                    "items": [
                        {"productId": "PROD-002", "quantity": 1, "price": 5.00}
                    ]
                }' mediaType="application/json"/>
            </munit-tools:set-event>
            
            <http:request method="POST" doc:name="POST Low Amount Order" doc:id="http-post-low-order" 
                         config-ref="HTTP_Listener_Config" 
                         path="/api/v1/orders">
                <http:headers><![CDATA[#[{"Content-Type": "application/json"}]]]></http:headers>
            </http:request>
        </munit:execution>
        
        <munit:validation>
            <!-- VIOLATION: Not properly testing business rule error response -->
            <munit-tools:assert-that doc:name="Assert Minimum Amount Error" doc:id="assert-min-amount-error" 
                                   expression="#[attributes.statusCode]" 
                                   is="#[MunitTools::equalTo(400)]"/>
        </munit:validation>
    </munit:test>

    <!-- Test for PATCH /api/v1/orders/{orderId}/status -->
    <munit:test name="test-update-order-status-success" doc:id="test-update-order-status-success">
        
        <munit:before-test>
            <munit-tools:mock-when doc:name="Mock Status Update" doc:id="mock-status-update">
                <munit-tools:with-attributes>
                    <munit-tools:with-attribute attributeName="doc:name" whereValue="Update Order Status"/>
                </munit-tools:with-attributes>
                <munit-tools:then-return>
                    <munit-tools:payload value='{"updatedRows": 1}' mediaType="application/json"/>
                </munit-tools:then-return>
            </munit-tools:mock-when>
        </munit:before-test>
        
        <munit:execution>
            <munit-tools:set-event doc:name="Set Status Update" doc:id="set-status-update">
                <munit-tools:payload value='{"status": "SHIPPED"}' mediaType="application/json"/>
                <munit-tools:attributes value='#[{
                    uriParams: {"orderId": "ORD-001"}
                }]'/>
            </munit-tools:set-event>
            
            <http:request method="PATCH" doc:name="PATCH Order Status" doc:id="http-patch-status" 
                         config-ref="HTTP_Listener_Config" 
                         path="/api/v1/orders/ORD-001/status">
                <http:headers><![CDATA[#[{"Content-Type": "application/json"}]]]></http:headers>
            </http:request>
        </munit:execution>
        
        <munit:validation>
            <munit-tools:assert-that doc:name="Assert Status Updated" doc:id="assert-status-updated" 
                                   expression="#[attributes.statusCode]" 
                                   is="#[MunitTools::equalTo(200)]"/>
            
            <!-- VIOLATION: Not testing status transition rules -->
            <!-- VIOLATION: Not testing notification triggers -->
        </munit:validation>
    </munit:test>

    <!-- VIOLATION: Missing invalid status transition test -->
    <munit:test name="test-invalid-status-transition" doc:id="test-invalid-status-transition" ignore="true">
        <!-- VIOLATION: Critical test ignored -->
        
        <munit:execution>
            <munit-tools:set-event doc:name="Set Invalid Status" doc:id="set-invalid-status">
                <munit-tools:payload value='{"status": "INVALID_STATUS"}' mediaType="application/json"/>
                <munit-tools:attributes value='#[{
                    uriParams: {"orderId": "ORD-001"}
                }]'/>
            </munit-tools:set-event>
            
            <http:request method="PATCH" doc:name="PATCH Invalid Status" doc:id="http-patch-invalid" 
                         config-ref="HTTP_Listener_Config" 
                         path="/api/v1/orders/ORD-001/status">
                <http:headers><![CDATA[#[{"Content-Type": "application/json"}]]]></http:headers>
            </http:request>
        </munit:execution>
        
        <munit:validation>
            <munit-tools:assert-that doc:name="Assert Invalid Status Error" doc:id="assert-invalid-status" 
                                   expression="#[attributes.statusCode]" 
                                   is="#[MunitTools::equalTo(400)]"/>
        </munit:validation>
    </munit:test>

    <!-- VIOLATION: Missing concurrency tests -->
    <!-- VIOLATION: Missing load testing -->
    <!-- VIOLATION: Missing security authorization tests -->
    
    <!-- Test SQL injection vulnerability -->
    <munit:test name="test-sql-injection-vulnerability" doc:id="test-sql-injection-vulnerability">
        
        <munit:execution>
            <http:request method="GET" doc:name="GET Orders with SQL Injection" doc:id="http-get-orders-sqli" 
                         config-ref="HTTP_Listener_Config" 
                         path="/api/v1/orders">
                <http:query-params><![CDATA[#[{
                    "customerId": "'; DROP TABLE orders; --"
                }]]]></http:query-params>
            </http:request>
        </munit:execution>
        
        <munit:validation>
            <!-- VIOLATION: Test that should fail but doesn't validate SQL injection protection -->
            <munit-tools:assert-that doc:name="Assert Response" doc:id="assert-sqli-response" 
                                   expression="#[attributes.statusCode]" 
                                   is="#[MunitTools::anyOf(MunitTools::equalTo(200), MunitTools::equalTo(400))]"/>
            
            <!-- VIOLATION: Not testing that the database is still intact -->
        </munit:validation>
    </munit:test>

    <!-- VIOLATION: Missing cleanup procedures -->
    <!-- VIOLATION: No test database reset between tests -->
    
</munit> 