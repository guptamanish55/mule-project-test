<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xmlns:munit="http://www.mulesoft.org/schema/mule/munit"
      xmlns:munit-tools="http://www.mulesoft.org/schema/mule/munit-tools"
      xmlns:http="http://www.mulesoft.org/schema/mule/http"
      xmlns:db="http://www.mulesoft.org/schema/mule/db"
      xmlns="http://www.mulesoft.org/schema/mule/core"
      xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
      xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
      http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
      http://www.mulesoft.org/schema/mule/munit-tools http://www.mulesoft.org/schema/mule/munit-tools/current/mule-munit-tools.xsd
      http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
      http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd">

    <!-- VIOLATION: Test suite without proper description -->
    <munit:config name="customer-api-test.xml" />

    <!-- VIOLATION: Missing setup/teardown configurations -->
    
    <!-- Test for GET /api/v1/customers -->
    <munit:test name="test-get-customers-success" doc:id="test-get-customers-success">
        
        <!-- VIOLATION: Mock without proper error scenarios -->
        <munit:before-test>
            <munit-tools:mock-when doc:name="Mock Database Select" doc:id="mock-db-select">
                <munit-tools:with-attributes>
                    <munit-tools:with-attribute attributeName="doc:name" whereValue="Select Customers"/>
                </munit-tools:with-attributes>
                <munit-tools:then-return>
                    <munit-tools:payload value='[
                        {
                            "customer_id": "123",
                            "first_name": "John",
                            "last_name": "Doe",
                            "email": "john.doe@example.com",
                            "phone": "555-0123",
                            "ssn": "123-45-6789",
                            "credit_score": "750",
                            "created_date": "2024-01-15"
                        }
                    ]' mediaType="application/json"/>
                </munit-tools:then-return>
            </munit-tools:mock-when>
        </munit:before-test>
        
        <munit:execution>
            <http:request method="GET" doc:name="GET Customers" doc:id="http-get-customers" 
                         config-ref="HTTP_Listener_Config" 
                         path="/api/v1/customers"/>
        </munit:execution>
        
        <!-- VIOLATION: Inadequate assertions -->
        <munit:validation>
            <munit-tools:assert-that doc:name="Assert Status Code" doc:id="assert-status-200" 
                                   expression="#[attributes.statusCode]" 
                                   is="#[MunitTools::equalTo(200)]"/>
            
            <!-- VIOLATION: Not validating response structure -->
            <munit-tools:assert-that doc:name="Assert Response Contains Customers" doc:id="assert-customers-exist" 
                                   expression="#[payload.customers]" 
                                   is="#[MunitTools::notNullValue()]"/>
            
            <!-- VIOLATION: Not testing sensitive data exposure -->
        </munit:validation>
    </munit:test>

    <!-- Test for POST /api/v1/customers -->
    <munit:test name="test-create-customer-success" doc:id="test-create-customer-success">
        
        <munit:before-test>
            <!-- VIOLATION: Mock without realistic response -->
            <munit-tools:mock-when doc:name="Mock Database Insert" doc:id="mock-db-insert">
                <munit-tools:with-attributes>
                    <munit-tools:with-attribute attributeName="doc:name" whereValue="Create Customer"/>
                </munit-tools:with-attributes>
                <munit-tools:then-return>
                    <munit-tools:payload value='{"insertedId": "456"}' mediaType="application/json"/>
                </munit-tools:then-return>
            </munit-tools:mock-when>
        </munit:before-test>
        
        <munit:execution>
            <munit-tools:set-event doc:name="Set Customer Data" doc:id="set-customer-data">
                <munit-tools:payload value='{
                    "firstName": "Jane",
                    "lastName": "Smith",
                    "email": "jane.smith@example.com",
                    "phone": "555-0456",
                    "ssn": "987-65-4321"
                }' mediaType="application/json"/>
            </munit-tools:set-event>
            
            <http:request method="POST" doc:name="POST Create Customer" doc:id="http-post-customer" 
                         config-ref="HTTP_Listener_Config" 
                         path="/api/v1/customers">
                <http:headers><![CDATA[#[{"Content-Type": "application/json"}]]]></http:headers>
            </http:request>
        </munit:execution>
        
        <munit:validation>
            <munit-tools:assert-that doc:name="Assert Creation Success" doc:id="assert-creation-success" 
                                   expression="#[attributes.statusCode]" 
                                   is="#[MunitTools::equalTo(200)]"/>
            
            <!-- VIOLATION: Not validating actual database interaction -->
            <!-- VIOLATION: Not testing input validation failures -->
        </munit:validation>
    </munit:test>

    <!-- VIOLATION: Missing negative test cases -->
    <munit:test name="test-create-customer-missing-email" doc:id="test-create-customer-missing-email" ignore="true">
        <!-- VIOLATION: Test marked as ignored without reason -->
        
        <munit:execution>
            <munit-tools:set-event doc:name="Set Invalid Customer Data" doc:id="set-invalid-customer-data">
                <munit-tools:payload value='{
                    "firstName": "Invalid",
                    "lastName": "Customer"
                }' mediaType="application/json"/>
            </munit-tools:set-event>
            
            <http:request method="POST" doc:name="POST Invalid Customer" doc:id="http-post-invalid-customer" 
                         config-ref="HTTP_Listener_Config" 
                         path="/api/v1/customers">
                <http:headers><![CDATA[#[{"Content-Type": "application/json"}]]]></http:headers>
            </http:request>
        </munit:execution>
        
        <munit:validation>
            <!-- VIOLATION: Missing proper error response validation -->
            <munit-tools:assert-that doc:name="Assert Error Response" doc:id="assert-error-response" 
                                   expression="#[attributes.statusCode]" 
                                   is="#[MunitTools::equalTo(400)]"/>
        </munit:validation>
    </munit:test>

    <!-- Test for PUT /api/v1/customers/{customerId} -->
    <munit:test name="test-update-customer-success" doc:id="test-update-customer-success">
        
        <munit:before-test>
            <munit-tools:mock-when doc:name="Mock Database Update" doc:id="mock-db-update">
                <munit-tools:with-attributes>
                    <munit-tools:with-attribute attributeName="doc:name" whereValue="Update Customer"/>
                </munit-tools:with-attributes>
                <munit-tools:then-return>
                    <munit-tools:payload value='{"updatedRows": 1}' mediaType="application/json"/>
                </munit-tools:then-return>
            </munit-tools:mock-when>
        </munit:before-test>
        
        <munit:execution>
            <munit-tools:set-event doc:name="Set Update Data" doc:id="set-update-data">
                <munit-tools:payload value='{
                    "firstName": "Updated",
                    "lastName": "Customer",
                    "email": "updated@example.com",
                    "phone": "555-9999"
                }' mediaType="application/json"/>
                <munit-tools:attributes value='#[{
                    uriParams: {"customerId": "123"}
                }]'/>
            </munit-tools:set-event>
            
            <http:request method="PUT" doc:name="PUT Update Customer" doc:id="http-put-customer" 
                         config-ref="HTTP_Listener_Config" 
                         path="/api/v1/customers/123">
                <http:headers><![CDATA[#[{"Content-Type": "application/json"}]]]></http:headers>
            </http:request>
        </munit:execution>
        
        <munit:validation>
            <munit-tools:assert-that doc:name="Assert Update Success" doc:id="assert-update-success" 
                                   expression="#[attributes.statusCode]" 
                                   is="#[MunitTools::equalTo(200)]"/>
        </munit:validation>
    </munit:test>

    <!-- VIOLATION: Missing DELETE test -->
    <!-- VIOLATION: Missing database connection failure tests -->
    <!-- VIOLATION: Missing performance tests -->
    
    <!-- Test for error handling -->
    <munit:test name="test-database-connection-failure" doc:id="test-database-connection-failure">
        
        <munit:before-test>
            <!-- VIOLATION: Mock that doesn't simulate real database error -->
            <munit-tools:mock-when doc:name="Mock Database Error" doc:id="mock-db-error">
                <munit-tools:with-attributes>
                    <munit-tools:with-attribute attributeName="doc:name" whereValue="Select Customers"/>
                </munit-tools:with-attributes>
                <munit-tools:then-return>
                    <munit-tools:error typeId="DB:CONNECTIVITY"/>
                </munit-tools:then-return>
            </munit-tools:mock-when>
        </munit:before-test>
        
        <munit:execution>
            <http:request method="GET" doc:name="GET Customers with DB Error" doc:id="http-get-customers-error" 
                         config-ref="HTTP_Listener_Config" 
                         path="/api/v1/customers"/>
        </munit:execution>
        
        <munit:validation>
            <!-- VIOLATION: Not properly testing error response structure -->
            <munit-tools:assert-that doc:name="Assert Error Status" doc:id="assert-error-status" 
                                   expression="#[attributes.statusCode]" 
                                   is="#[MunitTools::equalTo(500)]"/>
        </munit:validation>
    </munit:test>

    <!-- VIOLATION: Missing integration tests -->
    <!-- VIOLATION: Missing security tests -->
    <!-- VIOLATION: No test data cleanup -->
    
</mule> 