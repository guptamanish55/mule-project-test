<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core"
      xmlns:http="http://www.mulesoft.org/schema/mule/http"
      xmlns:db="http://www.mulesoft.org/schema/mule/db"
      xmlns:validation="http://www.mulesoft.org/schema/mule/validation"
      xmlns:json="http://www.mulesoft.org/schema/mule/json"
      xmlns="http://www.mulesoft.org/schema/mule/core"
      xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
      http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
      http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd
      http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd
      http://www.mulesoft.org/schema/mule/validation http://www.mulesoft.org/schema/mule/validation/current/mule-validation.xsd
      http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd">

    <!-- VIOLATION: Flow without proper error handling -->
    <flow name="order-api-main" doc:id="order-api-main">
        <http:listener doc:name="Order API Listener" doc:id="order-api-listener" 
                      config-ref="HTTP_Listener_Config" 
                      path="/api/v1/orders/*" 
                      allowedMethods="GET,POST,PUT,DELETE"/>
        
        <!-- VIOLATION: Logging full request including sensitive data -->
        <logger level="DEBUG" doc:name="Full Request Logger" doc:id="full-request-logger" 
               message="Order API - Full Request: payload=#[payload], headers=#[attributes.headers], params=#[attributes.queryParams]"/>
        
        <choice doc:name="Route by Path" doc:id="path-choice">
            <when expression="#[attributes.requestPath contains '/orders' and attributes.method == 'GET']">
                <flow-ref doc:name="Get Orders" doc:id="get-orders-ref" name="get-orders-flow"/>
            </when>
            <when expression="#[attributes.requestPath contains '/orders' and attributes.method == 'POST']">
                <flow-ref doc:name="Create Order" doc:id="create-order-ref" name="create-order-flow"/>
            </when>
            <when expression="#[attributes.requestPath contains '/orders' and attributes.method == 'PUT']">
                <flow-ref doc:name="Update Order" doc:id="update-order-ref" name="update-order-flow"/>
            </when>
            <when expression="#[attributes.requestPath contains '/status' and attributes.method == 'PATCH']">
                <flow-ref doc:name="Update Order Status" doc:id="update-status-ref" name="update-order-status-flow"/>
            </when>
            <otherwise>
                <!-- VIOLATION: Exposing internal system information in error -->
                <set-payload value='{"error": "Invalid endpoint or method", "internal_code": "ORD_404", "system": "order-service-v2.1.3", "server": "prod-server-01"}' 
                            doc:name="Invalid Request Response" doc:id="invalid-request"/>
                <set-variable value="404" doc:name="Set Status" doc:id="set-404-status" variableName="httpStatus"/>
            </otherwise>
        </choice>
    </flow>

    <!-- VIOLATION: Flow name inconsistent with naming convention -->
    <flow name="getOrders" doc:id="get-orders-flow">
        
        <!-- VIOLATION: Missing query parameter validation -->
        <set-variable value="#[attributes.queryParams.customerId default '']" doc:name="Set Customer ID" doc:id="set-customer-id-var" variableName="customerId"/>
        <set-variable value="#[attributes.queryParams.status default '']" doc:name="Set Status Filter" doc:id="set-status-var" variableName="statusFilter"/>
        
        <!-- VIOLATION: SQL injection risk with dynamic query building -->
        <choice doc:name="Build Query" doc:id="query-choice">
            <when expression="#[vars.customerId != '' and vars.statusFilter != '']">
                <set-variable value="SELECT * FROM orders WHERE customer_id = '${vars.customerId}' AND status = '${vars.statusFilter}' ORDER BY created_date DESC" 
                             doc:name="Customer and Status Query" doc:id="customer-status-query" variableName="sqlQuery"/>
            </when>
            <when expression="#[vars.customerId != '']">
                <set-variable value="SELECT * FROM orders WHERE customer_id = '${vars.customerId}' ORDER BY created_date DESC" 
                             doc:name="Customer Query" doc:id="customer-query" variableName="sqlQuery"/>
            </when>
            <otherwise>
                <!-- VIOLATION: Unrestricted query that could return too much data -->
                <set-variable value="SELECT * FROM orders ORDER BY created_date DESC LIMIT 1000" 
                             doc:name="All Orders Query" doc:id="all-orders-query" variableName="sqlQuery"/>
            </otherwise>
        </choice>
        
        <db:select doc:name="Execute Query" doc:id="execute-order-query" config-ref="Database_Config">
            <db:sql>#[vars.sqlQuery]</db:sql>
        </db:select>
        
        <!-- VIOLATION: Exposing sensitive payment information -->
        <ee:transform doc:name="Transform Orders" doc:id="transform-orders">
            <ee:message>
                <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{
    orders: payload map ((order, index) -> {
        orderId: order.order_id,
        customerId: order.customer_id,
        status: order.status,
        totalAmount: order.total_amount,
        // VIOLATION: Exposing payment details
        creditCardNumber: order.credit_card_number,
        creditCardCvv: order.credit_card_cvv,
        billingAddress: order.billing_address,
        items: order.items,
        created: order.created_date,
        // VIOLATION: Exposing internal system data
        internalNotes: order.internal_notes,
        processingFlags: order.processing_flags
    }),
    totalCount: sizeOf(payload),
    // VIOLATION: Exposing database connection info
    queryExecutedOn: "production-db-cluster-01.internal.company.com"
}]]></ee:set-payload>
            </ee:message>
        </ee:transform>
    </flow>

    <flow name="create-order-flow" doc:id="create-order-flow">
        
        <!-- VIOLATION: Missing content-type validation -->
        
        <!-- VIOLATION: Insufficient input validation -->
        <validation:is-not-null doc:name="Validate Payload" doc:id="validate-order-payload" value="#[payload]" 
                               message="Order data is required"/>
        
        <!-- VIOLATION: Missing required field validation -->
        <validation:is-not-empty doc:name="Validate Customer ID" doc:id="validate-customer-id" value="#[payload.customerId]" 
                                message="Customer ID is required"/>
        
        <!-- VIOLATION: Missing business rule validation -->
        <choice doc:name="Validate Order Amount" doc:id="amount-validation">
            <when expression="#[payload.totalAmount &lt; 10.00]">
                <!-- VIOLATION: Hardcoded business rule -->
                <raise-error doc:name="Minimum Order Error" doc:id="min-order-error" 
                           type="ORDER:MINIMUM_AMOUNT" 
                           description="Order minimum is $10.00"/>
            </when>
            <when expression="#[payload.totalAmount &gt; 50000.00]">
                <!-- VIOLATION: Hardcoded business rule -->
                <raise-error doc:name="Maximum Order Error" doc:id="max-order-error" 
                           type="ORDER:MAXIMUM_AMOUNT" 
                           description="Order maximum is $50,000.00"/>
            </when>
        </choice>
        
        <!-- VIOLATION: Missing inventory validation -->
        
        <ee:transform doc:name="Prepare Order Data" doc:id="prepare-order-data">
            <ee:message>
                <ee:set-payload><![CDATA[%dw 2.0
output application/java
---
{
    orderId: uuid(),
    customerId: payload.customerId,
    status: "PENDING",
    totalAmount: payload.totalAmount,
    // VIOLATION: Storing sensitive payment data
    creditCardNumber: payload.paymentInfo.creditCardNumber,
    creditCardCvv: payload.paymentInfo.cvv,
    creditCardExpiry: payload.paymentInfo.expiry,
    billingAddress: write(payload.billingAddress, "application/json"),
    shippingAddress: write(payload.shippingAddress, "application/json"),
    items: write(payload.items, "application/json"),
    createdDate: now(),
    // VIOLATION: Hardcoded internal values
    processingFlags: "FRAUD_CHECK_PENDING,INVENTORY_RESERVED",
    internalNotes: "Auto-created via API v1"
}]]></ee:set-payload>
            </ee:message>
        </ee:transform>
        
        <!-- VIOLATION: Missing transaction management -->
        <db:insert doc:name="Insert Order" doc:id="insert-order" config-ref="Database_Config">
            <db:sql>INSERT INTO orders (order_id, customer_id, status, total_amount, credit_card_number, credit_card_cvv, 
                    credit_card_expiry, billing_address, shipping_address, items, created_date, processing_flags, internal_notes) 
                    VALUES (:orderId, :customerId, :status, :totalAmount, :creditCardNumber, :creditCardCvv, 
                    :creditCardExpiry, :billingAddress, :shippingAddress, :items, :createdDate, :processingFlags, :internalNotes)</db:sql>
            <db:input-parameters><![CDATA[#[payload]]]></db:input-parameters>
        </db:insert>
        
        <!-- VIOLATION: Not handling database errors properly -->
        
        <!-- VIOLATION: Exposing internal order ID generation -->
        <set-payload value='{"message": "Order created successfully", "orderId": "#[payload.orderId]", "internalRefId": "#[uuid()]"}' 
                    doc:name="Order Created Response" doc:id="order-created-response"/>
        
        <!-- VIOLATION: Missing order confirmation email trigger -->
        <!-- VIOLATION: Missing inventory update trigger -->
    </flow>

    <flow name="update-order-flow" doc:id="update-order-flow">
        <set-variable value="#[attributes.uriParams.orderId]" doc:name="Set Order ID" doc:id="set-order-id-var" variableName="orderId"/>
        
        <!-- VIOLATION: Missing order ownership validation -->
        <!-- VIOLATION: Missing order status validation (e.g., can't update shipped orders) -->
        
        <validation:is-not-null doc:name="Validate Order ID" doc:id="validate-order-id" value="#[vars.orderId]" 
                               message="Order ID is required"/>
        
        <ee:transform doc:name="Prepare Update Data" doc:id="prepare-order-update">
            <ee:message>
                <ee:set-payload><![CDATA[%dw 2.0
output application/java
---
{
    orderId: vars.orderId,
    totalAmount: payload.totalAmount,
    items: write(payload.items, "application/json"),
    shippingAddress: write(payload.shippingAddress, "application/json"),
    modifiedDate: now(),
    // VIOLATION: Hardcoded modification tracking
    modifiedBy: "API_USER_SYSTEM"
}]]></ee:set-payload>
            </ee:message>
        </ee:transform>
        
        <db:update doc:name="Update Order" doc:id="update-order" config-ref="Database_Config">
            <db:sql>UPDATE orders SET total_amount = :totalAmount, items = :items, 
                    shipping_address = :shippingAddress, modified_date = :modifiedDate, 
                    modified_by = :modifiedBy WHERE order_id = :orderId</db:sql>
            <db:input-parameters><![CDATA[#[payload]]]></db:input-parameters>
        </db:update>
        
        <!-- VIOLATION: Not validating if update affected any rows -->
        <set-payload value='{"message": "Order updated successfully", "orderId": "#[vars.orderId]"}' 
                    doc:name="Update Success Response" doc:id="update-success-response"/>
    </flow>

    <flow name="update-order-status-flow" doc:id="update-order-status-flow">
        <set-variable value="#[attributes.uriParams.orderId]" doc:name="Set Order ID" doc:id="set-status-order-id" variableName="orderId"/>
        
        <!-- VIOLATION: Missing status transition validation -->
        <!-- VIOLATION: Missing authorization check for status changes -->
        
        <validation:is-not-empty doc:name="Validate New Status" doc:id="validate-new-status" value="#[payload.status]" 
                                message="New status is required"/>
        
        <!-- VIOLATION: Hardcoded status values without enum validation -->
        <choice doc:name="Validate Status Values" doc:id="status-validation">
            <when expression="#[payload.status == 'CANCELLED' or payload.status == 'SHIPPED' or payload.status == 'DELIVERED' or payload.status == 'PROCESSING']">
                <logger level="INFO" doc:name="Valid Status" doc:id="valid-status-logger" 
                       message="Updating order #[vars.orderId] to status #[payload.status]"/>
            </when>
            <otherwise>
                <!-- VIOLATION: Exposing valid status values to external users -->
                <raise-error doc:name="Invalid Status Error" doc:id="invalid-status-error" 
                           type="ORDER:INVALID_STATUS" 
                           description="Valid statuses are: PENDING, PROCESSING, SHIPPED, DELIVERED, CANCELLED"/>
            </otherwise>
        </choice>
        
        <db:update doc:name="Update Order Status" doc:id="update-order-status" config-ref="Database_Config">
            <!-- VIOLATION: Missing concurrent update protection -->
            <db:sql>UPDATE orders SET status = :status, status_updated_date = :updatedDate 
                    WHERE order_id = :orderId</db:sql>
            <db:input-parameters><![CDATA[#[{"status": payload.status, "orderId": vars.orderId, "updatedDate": now()}]]]></db:input-parameters>
        </db:update>
        
        <!-- VIOLATION: Missing status change notifications -->
        <!-- VIOLATION: Missing status change audit logging -->
        
        <set-payload value='{"message": "Order status updated successfully", "orderId": "#[vars.orderId]", "newStatus": "#[payload.status]"}' 
                    doc:name="Status Update Response" doc:id="status-update-response"/>
    </flow>

    <!-- VIOLATION: Missing error handling flows -->
    
</mule> 