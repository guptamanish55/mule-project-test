<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:file="http://www.mulesoft.org/schema/mule/file"
      xmlns:jms="http://www.mulesoft.org/schema/mule/jms"
      xmlns:http="http://www.mulesoft.org/schema/mule/http"
      xmlns:db="http://www.mulesoft.org/schema/mule/db"
      xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core"
      xmlns:json="http://www.mulesoft.org/schema/mule/json"
      xmlns="http://www.mulesoft.org/schema/mule/core"
      xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
      http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
      http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd
      http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd
      http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
      http://www.mulesoft.org/schema/mule/jms http://www.mulesoft.org/schema/mule/jms/current/mule-jms.xsd
      http://www.mulesoft.org/schema/mule/file http://www.mulesoft.org/schema/mule/file/current/mule-file.xsd">

    <!-- VIOLATION: Scheduled flow without error handling -->
    <flow name="crm-customer-sync-flow" doc:id="crm-customer-sync-flow">
        <!-- VIOLATION: Fixed schedule without configuration -->
        <scheduler doc:name="CRM Sync Scheduler" doc:id="crm-sync-scheduler">
            <scheduling-strategy>
                <fixed-frequency frequency="300000"/>
            </scheduling-strategy>
        </scheduler>
        
        <!-- VIOLATION: Logging start without correlation ID -->
        <logger level="INFO" doc:name="Sync Start Logger" doc:id="sync-start-logger" 
               message="Starting CRM customer synchronization at #[now()]"/>
        
        <!-- VIOLATION: Hardcoded timestamp for incremental sync -->
        <set-variable value="#[now() - |PT1H|]" doc:name="Set Last Sync Time" doc:id="set-last-sync" variableName="lastSyncTime"/>
        
        <db:select doc:name="Get Updated Customers" doc:id="get-updated-customers" config-ref="Database_Config">
            <!-- VIOLATION: Unparameterized SQL with potential performance issues -->
            <db:sql>SELECT * FROM customers WHERE modified_date >= :lastSyncTime OR created_date >= :lastSyncTime ORDER BY modified_date ASC</db:sql>
            <db:input-parameters><![CDATA[#[{"lastSyncTime": vars.lastSyncTime}]]]></db:input-parameters>
        </db:select>
        
        <!-- VIOLATION: Processing all records in single batch without pagination -->
        <foreach doc:name="Process Each Customer" doc:id="process-each-customer" collection="#[payload]">
            <flow-ref doc:name="Sync Customer to CRM" doc:id="sync-customer-ref" name="sync-single-customer-flow"/>
        </foreach>
        
        <!-- VIOLATION: No completion logging or metrics -->
    </flow>

    <flow name="sync-single-customer-flow" doc:id="sync-single-customer-flow">
        
        <!-- VIOLATION: Missing input validation -->
        
        <ee:transform doc:name="Transform to CRM Format" doc:id="transform-to-crm">
            <ee:message>
                <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{
    externalId: payload.customer_id,
    firstName: payload.first_name,
    lastName: payload.last_name,
    email: payload.email,
    phone: payload.phone,
    // VIOLATION: Sending sensitive data to external system
    ssn: payload.ssn,
    creditScore: payload.credit_score,
    // VIOLATION: Hardcoded field mappings
    customerType: "ECOMMERCE",
    source: "INTERNAL_SYSTEM",
    syncedAt: now()
}]]></ee:set-payload>
            </ee:message>
        </ee:transform>
        
        <!-- VIOLATION: HTTP request without timeout or retry -->
        <http:request method="POST" doc:name="Send to CRM" doc:id="send-to-crm" config-ref="CRM_API_Config" path="/customers">
            <!-- VIOLATION: Hardcoded API key in header -->
            <http:headers><![CDATA[#[{
                "Content-Type": "application/json",
                "X-API-Key": "sk-1234567890abcdefghijklmnopqrstuvwxyz",
                "X-Client-ID": "ecommerce-platform"
            }]]]></http:headers>
        </http:request>
        
        <!-- VIOLATION: Not handling different HTTP response codes -->
        <!-- VIOLATION: No retry mechanism for failed syncs -->
        
        <choice doc:name="Check CRM Response" doc:id="check-crm-response">
            <when expression="#[attributes.statusCode == 200 or attributes.statusCode == 201]">
                <logger level="INFO" doc:name="Sync Success" doc:id="sync-success-logger" 
                       message="Customer #[payload.externalId] synced successfully to CRM"/>
            </when>
            <otherwise>
                <!-- VIOLATION: Inadequate error logging -->
                <logger level="ERROR" doc:name="Sync Error" doc:id="sync-error-logger" 
                       message="Failed to sync customer to CRM: #[attributes.statusCode]"/>
            </otherwise>
        </choice>
    </flow>

    <!-- VIOLATION: File processing without proper error handling -->
    <flow name="file-order-import-flow" doc:id="file-order-import-flow">
        <file:listener doc:name="Order File Listener" doc:id="order-file-listener" 
                      config-ref="File_Config" 
                      directory="/tmp/incoming">
            <scheduling-strategy>
                <fixed-frequency frequency="10000"/>
            </scheduling-strategy>
            <!-- VIOLATION: No file type validation -->
        </file:listener>
        
        <!-- VIOLATION: Processing files without backup -->
        <!-- VIOLATION: No file size validation -->
        
        <logger level="INFO" doc:name="File Processing Start" doc:id="file-processing-start" 
               message="Processing order file: #[attributes.fileName] of size #[attributes.size]"/>
        
        <!-- VIOLATION: Assuming file format without validation -->
        <ee:transform doc:name="Parse CSV to JSON" doc:id="parse-csv">
            <ee:message>
                <ee:set-payload><![CDATA[%dw 2.0
output application/json
var csvData = payload splitBy '\n'
var headers = (csvData[0] splitBy ',') map trim($)
var rows = csvData[1 to -1] filter ($ != "")
---
rows map ((row, index) -> {
    (headers zip (row splitBy ',')) reduce ((item, accumulator={}) -> 
        accumulator ++ {(item[0]): item[1]}
    )
})]]></ee:set-payload>
            </ee:message>
        </ee:transform>
        
        <!-- VIOLATION: Processing all records without batch size limits -->
        <foreach doc:name="Process Each Order" doc:id="process-each-order" collection="#[payload]">
            
            <!-- VIOLATION: Missing data validation for each record -->
            
            <ee:transform doc:name="Transform Order Data" doc:id="transform-order-data">
                <ee:message>
                    <ee:set-payload><![CDATA[%dw 2.0
output application/java
---
{
    orderId: payload.order_id default uuid(),
    customerId: payload.customer_id,
    totalAmount: payload.total_amount as Number,
    status: payload.status default "PENDING",
    // VIOLATION: Not validating required fields
    items: payload.items,
    createdDate: now(),
    source: "FILE_IMPORT"
}]]></ee:set-payload>
                </ee:message>
            </ee:transform>
            
            <!-- VIOLATION: Direct database insert without duplicate checking -->
            <db:insert doc:name="Insert Order" doc:id="insert-file-order" config-ref="Database_Config">
                <db:sql>INSERT INTO orders (order_id, customer_id, total_amount, status, items, created_date, source) 
                        VALUES (:orderId, :customerId, :totalAmount, :status, :items, :createdDate, :source)</db:sql>
                <db:input-parameters><![CDATA[#[payload]]]></db:input-parameters>
            </db:insert>
        </foreach>
        
        <!-- VIOLATION: Moving processed file without success confirmation -->
        <file:move doc:name="Move to Processed" doc:id="move-to-processed" 
                  config-ref="File_Config" 
                  sourcePath="#[attributes.fileName]" 
                  targetPath="/tmp/processed/#[attributes.fileName]"/>
        
        <!-- VIOLATION: No processing summary or metrics -->
    </flow>

    <!-- VIOLATION: JMS flow without proper error handling -->
    <flow name="order-notification-flow" doc:id="order-notification-flow">
        <jms:listener doc:name="Order Status Updates" doc:id="order-status-updates" 
                     config-ref="JMS_Config" 
                     destination="order.status.updates"/>
        
        <!-- VIOLATION: Processing JMS message without validation -->
        
        <logger level="INFO" doc:name="Notification Start" doc:id="notification-start" 
               message="Processing order status notification: #[payload]"/>
        
        <!-- VIOLATION: Assuming JSON format without validation -->
        <json:json-to-object-transformer doc:name="Parse JSON" doc:id="parse-notification-json"/>
        
        <choice doc:name="Notification Type" doc:id="notification-type-choice">
            <when expression="#[payload.eventType == 'ORDER_SHIPPED']">
                <flow-ref doc:name="Send Shipping Notification" doc:id="shipping-notification-ref" name="send-shipping-email-flow"/>
            </when>
            <when expression="#[payload.eventType == 'ORDER_DELIVERED']">
                <flow-ref doc:name="Send Delivery Notification" doc:id="delivery-notification-ref" name="send-delivery-email-flow"/>
            </when>
            <when expression="#[payload.eventType == 'ORDER_CANCELLED']">
                <flow-ref doc:name="Send Cancellation Notification" doc:id="cancellation-notification-ref" name="send-cancellation-email-flow"/>
            </when>
            <otherwise>
                <!-- VIOLATION: Logging unknown events without proper categorization -->
                <logger level="WARN" doc:name="Unknown Event" doc:id="unknown-event-logger" 
                       message="Unknown order event type: #[payload.eventType] for order #[payload.orderId]"/>
            </otherwise>
        </choice>
    </flow>

    <flow name="send-shipping-email-flow" doc:id="send-shipping-email-flow">
        
        <!-- VIOLATION: Missing customer data retrieval -->
        <!-- VIOLATION: Hardcoded email template -->
        
        <set-payload value='{"to": "customer@example.com", "subject": "Your order has shipped!", "body": "Your order #[payload.orderId] has been shipped and is on its way."}' 
                    doc:name="Email Template" doc:id="shipping-email-template"/>
        
        <!-- VIOLATION: Missing actual email sending implementation -->
        <logger level="INFO" doc:name="Email Sent" doc:id="shipping-email-sent" 
               message="Shipping notification sent for order #[payload.orderId]"/>
    </flow>

    <flow name="send-delivery-email-flow" doc:id="send-delivery-email-flow">
        <!-- VIOLATION: Duplicate email template logic -->
        <set-payload value='{"to": "customer@example.com", "subject": "Your order has been delivered!", "body": "Your order #[payload.orderId] has been delivered successfully."}' 
                    doc:name="Delivery Email Template" doc:id="delivery-email-template"/>
        
        <logger level="INFO" doc:name="Delivery Email Sent" doc:id="delivery-email-sent" 
               message="Delivery notification sent for order #[payload.orderId]"/>
    </flow>

    <flow name="send-cancellation-email-flow" doc:id="send-cancellation-email-flow">
        <!-- VIOLATION: Duplicate email template logic -->
        <set-payload value='{"to": "customer@example.com", "subject": "Your order has been cancelled", "body": "Your order #[payload.orderId] has been cancelled. A refund will be processed within 3-5 business days."}' 
                    doc:name="Cancellation Email Template" doc:id="cancellation-email-template"/>
        
        <logger level="INFO" doc:name="Cancellation Email Sent" doc:id="cancellation-email-sent" 
               message="Cancellation notification sent for order #[payload.orderId]"/>
    </flow>

    <!-- VIOLATION: Missing comprehensive error handling -->
    <!-- VIOLATION: No dead letter queue configuration for failed messages -->
    
</mule> 